# -*- coding: utf-8 -*-
"""style_transfer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YYqkuPmdnZDNEax44FeobqlACuIQMB2W
"""

!pip install tensorflow==2.0.0

"""# Neural Style Transfer

Neural Style Transfer ist eine Optimierungstechnik, die verwendet wird, um zwei Bilder - ein Content-Bild und ein Style-Reference-Bild (z.B. ein Artwork eines berühmten Malers) - aufzunehmen und so zusammenzufügen, dass das Ausgabebild wie das Content-Bild aussieht, aber im Stil des Style-Reference-Bildes "gemalt" wird.

Das Output-Bildes wird solang optimiert, sodass es die Inhalts-Eigenschaften des Content-Bildes, sowie die Stil-Eigenschaften des Style-Bildes enthält. Dies ist Möglich in dem wir die Eigenschaften aus den mittleren Layers eines CNNs laden!

## Beispiel

Nehmen wir folgenden Hund und das Artwork von Wassily Kandinsky:

<img src="https://storage.googleapis.com/download.tensorflow.org/example_images/YellowLabradorLooking_new.jpg" width="300px"/>

[Yellow Labrador Looking](https://commons.wikimedia.org/wiki/File:YellowLabradorLooking_new.jpg), Wikimedia Commons

<img src="https://storage.googleapis.com/download.tensorflow.org/example_images/Vassily_Kandinsky%2C_1913_-_Composition_7.jpg" width="300px"/>


Wie würde Kandinsky nun den Hund zeichen?

<img src="https://tensorflow.org/tutorials/generative/images/stylized-image.png" style="width: 300px;"/>

## Vorbereitung
### Imports und co
"""

import IPython.display as display

import matplotlib.pyplot as plt
import matplotlib as mpl
mpl.rcParams['figure.figsize'] = (12,12)
mpl.rcParams['axes.grid'] = False

from tensorflow.keras import Model
from tensorflow.keras.applications import VGG19
from tensorflow.keras.applications.vgg16 import preprocess_input, decode_predictions

import tensorflow as tf
import numpy as np
import PIL.Image
import functools
import time

def tensor_to_image(tensor):
  tensor = tensor * 255
  tensor = np.array(tensor, dtype=np.uint8)
  if np.ndim(tensor) > 3:
    tensor = tensor[0]
  return PIL.Image.fromarray(tensor)

# images paths
content_path = 'base3.jpg'
style_path = 'style2.jpg'

"""## Input anzeigen"""

def load_img(path_to_img):
  max_dim = 512
  img = tf.io.read_file(path_to_img)
  img = tf.image.decode_image(img, channels=3)
  img = tf.image.convert_image_dtype(img, tf.float32)

  shape = tf.cast(tf.shape(img)[:-1], tf.float32)
  long_dim = max(shape)
  scale = max_dim / long_dim

  new_shape = tf.cast(shape * scale, tf.int32)

  img = tf.image.resize(img, new_shape)
  img = img[tf.newaxis, :]
  return img

def imshow(image, title=None):
  if len(image.shape) > 3:
    image = tf.squeeze(image, axis=0)

  plt.imshow(image)
  if title:
    plt.title(title)

content_image = load_img(content_path)
style_image = load_img(style_path)

plt.subplot(1, 2, 1)
imshow(content_image, 'Content Image')

plt.subplot(1, 2, 2)
imshow(style_image, 'Style Image')

"""## Content- und Style-Features"""

# load VGG19 and test input 
x = preprocess_input(content_image * 255)
x = tf.image.resize(x, (224, 224))
vgg = VGG19(include_top=True, weights='imagenet')
prediction_probabilities = vgg(x)
prediction_probabilities.shape

predicted_top_5 = decode_predictions(prediction_probabilities.numpy())[0]
[(class_name, prob) for (number, class_name, prob) in predicted_top_5]

# load VGG19 without classification header
vgg = VGG19(include_top=False, weights='imagenet')

print()
for layer in vgg.layers:
  print(layer.name)

# Content layer where will pull our feature maps
content_layers = ['block5_conv2'] 

# Style layer of interest
style_layers = ['block1_conv1',
                'block2_conv1',
                'block3_conv1', 
                'block4_conv1', 
                'block5_conv1']

num_content_layers = len(content_layers)
num_style_layers = len(style_layers)

"""## Model erstellen"""

def vgg_layers(layer_names):
  vgg = VGG19(include_top=False, weights='imagenet')
  vgg.trainable = False

  outputs = [vgg.get_layer(name).output for name in layer_names]

  model = Model([vgg.input], outputs)

  return model

style_extractor = vgg_layers(style_layers)
style_outputs = style_extractor(style_image * 255)

#Look at the statistics of each layer's output
for name, output in zip(style_layers, style_outputs):
  print(name)
  print("  shape: ", output.numpy().shape)
  print("  min: ", output.numpy().min())
  print("  max: ", output.numpy().max())
  print("  mean: ", output.numpy().mean())
  print()

"""## Style berechnen

Es stellt sich heraus, dass der Stil eines Bildes mit Hilfe von Mittelwerten und Relationen zwischen den verschiedenen Feature Maps beschrieben werden kann. Die Gram-Matrix, die diese Informationen enthält, berechnet man, indem man das äußere Produkt des Featurevektors an jeder Stelle mit sich selbst nimmt und dieses äußere Produkt über alle Positionen mittelt. Diese Gramm-Matrix kann für einen bestimmten Layer berechnet werden als:
$$G^l_{cd} = \frac{\sum_{ij} F^l_{ijc}(x)F^l_{ijd}(x)}{IJ}$$

Beispiel: Der Output eines Conv-Layers ist: 

$$ F = 8 \times 8 \times 16 \Rightarrow 16 \times 64 $$
$$ F^{T} = 64 \times 16 $$
$$ G = F^{T} \times F $$

<img src="https://i.ibb.co/chg6Htp/Untitled-Diagram.png" height="250px"/>

[Sayak Paul, June 21st, 2019](https://www.datacamp.com/community/tutorials/implementing-neural-style-transfer-using-tensorflow), DataCamp
"""

def gram_matrix(input_tensor):
  result = tf.linalg.einsum('bijc, bijd->bcd', input_tensor, input_tensor)
  input_shape = tf.shape(input_tensor)
  num_locations = tf.cast(input_shape[1] * input_shape[2], tf.float32)
  result = result / num_locations
  return result

"""## Style und Content Features extrahieren

Hierfür werden wir die Model Klasse nutzen und daraus eine eigene Unterklasse **StyleContentModel** davon erstellen. Diese Klasse liefert uns für unser Bild die Features von den Style (Gram-Matrix) bzw. Content Layers zurück!
"""

class StyleContentModel(tf.keras.models.Model):
  def __init__(self, style_layers, content_layers):
    super(StyleContentModel, self).__init__()
    self.vgg = vgg_layers(style_layers + content_layers)
    self.style_layers = style_layers
    self.content_layers = content_layers
    self.num_style_layers = len(style_layers)
    self.vgg.trainable = False

  def call(self, inputs):
    inputs = inputs * 255
    preprocessed_inputs = preprocess_input(inputs)
    outputs = self.vgg(preprocessed_inputs)
    style_outputs, content_outputs = (outputs[:self.num_style_layers], outputs[self.num_style_layers:])

    style_outputs = [gram_matrix(style_output) for style_output in style_outputs]

    content_dict = {content_name:value for content_name, value in zip(self.content_layers, content_outputs)}

    style_dict = {style_name:value for style_name, value in zip(self.style_layers, style_outputs)}

    return {'content': content_dict, 'style':style_dict}

extractor = StyleContentModel(style_layers, content_layers)

results = extractor(tf.constant(content_image))

print('Styles:')
for name, output in sorted(results['style'].items()):
  print("  ", name)
  print("    shape: ", output.numpy().shape)
  print("    min: ", output.numpy().min())
  print("    max: ", output.numpy().max())
  print("    mean: ", output.numpy().mean())
  print()

print("Contents:")
for name, output in sorted(results['content'].items()):
  print("  ", name)
  print("    shape: ", output.numpy().shape)
  print("    min: ", output.numpy().min())
  print("    max: ", output.numpy().max())
  print("    mean: ", output.numpy().mean())

"""## Style Transfer Algorithmus
Mit dem gerade erstellten Extraktor können wir nun den Style Transfer durchführen!
"""

# Style und Content Target
style_targets = extractor(style_image)['style']
content_targets = extractor(content_image)['content']

image = tf.Variable(content_image)

def clip_0_1(image):
  return tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)

"""Lass uns nun den Optimizer erstellen:"""

opt = tf.optimizers.Adam(learning_rate=0.02)

style_weight = 1e-2
content_weight = 1e4

"""Jetzt berechnen wir den Style Loss und den Content Loss, damit unser Optimizer es optimieren kann. 

Um die Content- und Style-Funktionen in einem einzigen Bild zu kombinieren, musst du mit einem Target-Image beginnen, das entweder nur ein leeres oder die Kopie des Content-Image ist. Um nun sowohl die Content- als auch die Style-Features mit einem CNN effektiv zu lernen, benötigt man eine benutzerdefinierte Loss-Funktion, die man optimiert, um ein flüssiges und stilsicheres Bild aus dem Content und den Style Bildern zu erhalten. Diese benutzerdefinierte Loss-Funktion ist im Wesentlichen eine Zusammenführung von zwei verschiedenen Verlusten:

*   Content-Loss stellt sicher, dass die Menge an Content erhalten bleibt.
*   Style-Loss, kümmert sich um die Menge des Stils, das auf dem Target-Image übertragen wird.

**Style Loss:**
$$ \mathcal{L}_{style} = \frac{w_i \sum (G_{s, i} - G_{t, i})^2}{\text{# style layers}}$$
**Content Loss:**
$$ \mathcal{L}_{content} = \frac{w_i \sum (I_{c, i} - I_{t, i})^2}{\text{# content layers}}$$
"""

def style_content_loss(outputs):
  style_outputs = outputs['style']
  content_outputs = outputs['content']

  style_loss = tf.add_n([tf.reduce_mean((style_outputs[name] - style_targets[name]) ** 2) for name in style_outputs.keys()])
  style_loss *= style_weight / num_style_layers

  content_loss = tf.add_n([tf.reduce_mean((content_outputs[name] - content_targets[name]) ** 2) for name in content_outputs.keys()])
  content_loss *= content_weight / num_content_layers

  loss = style_loss + content_loss
  return loss

@tf.function
def train_step(image):
  with tf.GradientTape() as tape:
    outputs = extractor(image)
    loss = style_content_loss(outputs)

  grad = tape.gradient(loss, image)
  opt.apply_gradients([(grad, image)])
  image.assign(clip_0_1(image))

train_step(image)
train_step(image)
train_step(image)
tensor_to_image(image)

steps = 300

step = 0

for s in range(steps):
  step += 1
  train_step(image)
  print(".", end='')
display.clear_output(wait=True)
display.display(tensor_to_image(image))
print("Train Step: {}".format(step))

"""## Total Variation Loss

Ein Nachteil dieser grundlegenden Implementierung ist, dass sie viele hochfrequente Artefakte (Noise) erzeugt. Wir versuchen nun es zu verringern mit einem expliziten Regularisierungs-Term für die hochfrequenten Teile des Bildes. Beim Style-Transfer wird dies oft als *Total Variation Loss* bezeichnet:
"""

def high_pass_x_y(image):
  x_var = image[:,:,1:,:] - image[:,:,:-1,:]
  y_var = image[:,1:,:,:] - image[:,:-1,:,:]

  return x_var, y_var

x_deltas, y_deltas = high_pass_x_y(content_image)

plt.figure(figsize=(14,10))
plt.subplot(2,2,1)
imshow(clip_0_1(2*y_deltas+0.5), "Horizontal Deltas: Original")

plt.subplot(2,2,2)
imshow(clip_0_1(2*x_deltas+0.5), "Vertical Deltas: Original")

x_deltas, y_deltas = high_pass_x_y(image)

plt.subplot(2,2,3)
imshow(clip_0_1(2*y_deltas+0.5), "Horizontal Deltas: Styled")

plt.subplot(2,2,4)
imshow(clip_0_1(2*x_deltas+0.5), "Vertical Deltas: Styled")

plt.figure(figsize=(14,10))

sobel = tf.image.sobel_edges(content_image)
plt.subplot(1,2,1)
imshow(clip_0_1(sobel[...,0]/4+0.5), "Horizontal Sobel-edges")
plt.subplot(1,2,2)
imshow(clip_0_1(sobel[...,1]/4+0.5), "Vertical Sobel-edges")

# Berechne "Noise-Loss"
tf.image.total_variation(image).numpy()

"""## Optimierung wiederholen"""

total_variation_weight = 30

@tf.function
def train_step(image):
  with tf.GradientTape() as tape:
    outputs = extractor(image)
    loss = style_content_loss(outputs)
    loss += total_variation_weight * tf.image.total_variation(image)

  grad = tape.gradient(loss, image)
  opt.apply_gradients([(grad, image)])
  image.assign(clip_0_1(image))

image = tf.Variable(content_image)

epochs = 10
steps_per_epoch = 50

step = 0
for e in range(epochs):
  for s in range(steps_per_epoch):
    step += 1
    train_step(image)
    display.clear_output(wait=True)
    display.display(tensor_to_image(image))
    print("{} / {}".format(step, (epochs * steps_per_epoch)))